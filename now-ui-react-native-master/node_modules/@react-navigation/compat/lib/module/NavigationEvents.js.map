{"version":3,"sources":["NavigationEvents.tsx"],"names":["React","useNavigation","NavigationEvents","props","navigation","propsRef","useRef","useEffect","current","unsubFocus","addListener","onWillFocus","unsubBlur","onWillBlur","unsubTransitionEnd","isFocused","onDidFocus","onDidBlur"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AASA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAwC;AACrD,QAAMC,UAAU,GAAGH,aAAa,EAAhC;AACA,QAAMI,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAaH,KAAb,CAAjB;AAEAH,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpBF,IAAAA,QAAQ,CAACG,OAAT,GAAmBL,KAAnB;AACD,GAFD;AAIAH,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpB,UAAME,UAAU,GAAGL,UAAU,CAACM,WAAX,CAAuB,OAAvB,EAAgC,MAAM;AAAA;;AACvD,oDAAAL,QAAQ,CAACG,OAAT,EAAiBG,WAAjB;AACD,KAFkB,CAAnB;AAIA,UAAMC,SAAS,GAAGR,UAAU,CAACM,WAAX,CAAuB,MAAvB,EAA+B,MAAM;AAAA;;AACrD,sDAAAL,QAAQ,CAACG,OAAT,EAAiBK,UAAjB;AACD,KAFiB,CAAlB,CALoB,CASpB;;AACA,UAAMC,kBAAkB,GAAGV,UAAU,CAACM,WAAX,CAAuB,eAAvB,EAAwC,MAAM;AACvE,UAAIN,UAAU,CAACW,SAAX,EAAJ,EAA4B;AAAA;;AAC1B,uDAAAV,QAAQ,CAACG,OAAT,EAAiBQ,UAAjB;AACD,OAFD,MAEO;AAAA;;AACL,wDAAAX,QAAQ,CAACG,OAAT,EAAiBS,SAAjB;AACD;AACF,KAN0B,CAA3B;AAQA,WAAO,MAAM;AACXR,MAAAA,UAAU;AACVG,MAAAA,SAAS;AACTE,MAAAA,kBAAkB;AACnB,KAJD;AAKD,GAvBD,EAuBG,CAACV,UAAD,CAvBH;AAyBA,SAAO,IAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useNavigation } from '@react-navigation/native';\n\ntype Props = {\n  onWillFocus?: () => void;\n  onDidFocus?: () => void;\n  onWillBlur?: () => void;\n  onDidBlur?: () => void;\n};\n\nexport default function NavigationEvents(props: Props) {\n  const navigation = useNavigation();\n  const propsRef = React.useRef(props);\n\n  React.useEffect(() => {\n    propsRef.current = props;\n  });\n\n  React.useEffect(() => {\n    const unsubFocus = navigation.addListener('focus', () => {\n      propsRef.current.onWillFocus?.();\n    });\n\n    const unsubBlur = navigation.addListener('blur', () => {\n      propsRef.current.onWillBlur?.();\n    });\n\n    // @ts-ignore\n    const unsubTransitionEnd = navigation.addListener('transitionEnd', () => {\n      if (navigation.isFocused()) {\n        propsRef.current.onDidFocus?.();\n      } else {\n        propsRef.current.onDidBlur?.();\n      }\n    });\n\n    return () => {\n      unsubFocus();\n      unsubBlur();\n      unsubTransitionEnd();\n    };\n  }, [navigation]);\n\n  return null;\n}\n"]}