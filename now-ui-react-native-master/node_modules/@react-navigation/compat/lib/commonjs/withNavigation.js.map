{"version":3,"sources":["withNavigation.tsx"],"names":["withNavigation","Comp","WrappedComponent","onRef","rest","navigation","displayName","name"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;AAOe,SAASA,cAAT,CAIbC,IAJa,EAIJ;AACT,QAAMC,gBAAgB,GAAG,UAOC;AAAA,QAPA;AACxBC,MAAAA;AADwB,KAOA;AAAA,QALrBC,IAKqB;;AACxB,UAAMC,UAAU,GAAG,mCAAnB,CADwB,CAGxB;;AACA,wBAAO,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEF,KAAX;AAAkB,MAAA,UAAU,EAAEE;AAA9B,OAA8CD,IAA9C,EAAP;AACD,GAZD;;AAcAF,EAAAA,gBAAgB,CAACI,WAAjB,4BACEL,IAAI,CAACK,WAAL,IAAoBL,IAAI,CAACM,IAD3B;AAIA,SAAOL,gBAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { NavigationProp, ParamListBase } from '@react-navigation/native';\nimport useCompatNavigation from './useCompatNavigation';\nimport { CompatNavigationProp } from './types';\n\ntype InjectedProps<T extends NavigationProp<ParamListBase>> = {\n  navigation: CompatNavigationProp<T>;\n};\n\nexport default function withNavigation<\n  T extends NavigationProp<ParamListBase>,\n  P extends InjectedProps<T>,\n  C extends React.ComponentType<P>\n>(Comp: C) {\n  const WrappedComponent = ({\n    onRef,\n    ...rest\n  }: Exclude<P, InjectedProps<T>> & {\n    onRef?: C extends React.ComponentClass<any>\n      ? React.Ref<InstanceType<C>>\n      : never;\n  }): React.ReactElement => {\n    const navigation = useCompatNavigation<T>();\n\n    // @ts-ignore\n    return <Comp ref={onRef} navigation={navigation} {...rest} />;\n  };\n\n  WrappedComponent.displayName = `withNavigation(${\n    Comp.displayName || Comp.name\n  })`;\n\n  return WrappedComponent;\n}\n"]}