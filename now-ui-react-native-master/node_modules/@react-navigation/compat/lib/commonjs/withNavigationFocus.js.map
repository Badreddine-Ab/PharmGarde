{"version":3,"sources":["withNavigationFocus.tsx"],"names":["withNavigationFocus","Comp","WrappedComponent","onRef","rest","isFocused","displayName","name"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;AAMe,SAASA,mBAAT,CAGbC,IAHa,EAGJ;AACT,QAAMC,gBAAgB,GAAG,UAOC;AAAA,QAPA;AACxBC,MAAAA;AADwB,KAOA;AAAA,QALrBC,IAKqB;;AACxB,UAAMC,SAAS,GAAG,2BAAlB,CADwB,CAGxB;;AACA,wBAAO,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEF,KAAX;AAAkB,MAAA,SAAS,EAAEE;AAA7B,OAA4CD,IAA5C,EAAP;AACD,GAZD;;AAcAF,EAAAA,gBAAgB,CAACI,WAAjB,iCACEL,IAAI,CAACK,WAAL,IAAoBL,IAAI,CAACM,IAD3B;AAIA,SAAOL,gBAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useIsFocused } from '@react-navigation/native';\n\ntype InjectedProps = {\n  isFocused: boolean;\n};\n\nexport default function withNavigationFocus<\n  P extends InjectedProps,\n  C extends React.ComponentType<P>\n>(Comp: C) {\n  const WrappedComponent = ({\n    onRef,\n    ...rest\n  }: Exclude<P, InjectedProps> & {\n    onRef?: C extends React.ComponentClass<any>\n      ? React.Ref<InstanceType<C>>\n      : never;\n  }): React.ReactElement => {\n    const isFocused = useIsFocused();\n\n    // @ts-ignore\n    return <Comp ref={onRef} isFocused={isFocused} {...rest} />;\n  };\n\n  WrappedComponent.displayName = `withNavigationFocus(${\n    Comp.displayName || Comp.name\n  })`;\n\n  return WrappedComponent;\n}\n"]}